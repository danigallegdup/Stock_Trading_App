version: "3.9"

services:
  clean-mongo:
    build:
      context: ./backend/config
    container_name: clean-mongo
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
  
  auth-service-1:
    build:
      context: ./backend/auth
    container_name: auth-service-1
    ports:
      - "30011:3001"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  auth-service-2:
    build:
      context: ./backend/auth
    container_name: auth-service-2
    ports:
      - "30012:3001"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  auth-service-3:
    build:
      context: ./backend/auth
    container_name: auth-service-3
    ports:
      - "30013:3001"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  auth-service-4:
    build:
      context: ./backend/auth
    container_name: auth-service-4
    ports:
      - "30014:3001"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  auth-service-5:
    build:
      context: ./backend/auth
    container_name: auth-service-5
    ports:
      - "30015:3001"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  auth-service-6:
    build:
      context: ./backend/auth
    container_name: auth-service-6
    ports:
      - "30016:3001"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  auth-service-7:
    build:
      context: ./backend/auth
    container_name: auth-service-7
    ports:
      - "30017:3001"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  auth-service-8:
    build:
      context: ./backend/auth
    container_name: auth-service-8
    ports:
      - "30018:3001"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  auth-service-9:
    build:
      context: ./backend/auth
    container_name: auth-service-9
    ports:
      - "30019:3001"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    

  transaction-service-1:
    build:
        context: ./backend/transaction
    container_name: transaction-service-1
    volumes:
      - ./backend/middleware:/backend/middleware
    ports:
      - "30041:3004"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  transaction-service-2:
    build:
        context: ./backend/transaction
    container_name: transaction-service-2
    volumes:
      - ./backend/middleware:/backend/middleware
    ports:
      - "30042:3004"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  transaction-service-3:
    build:
        context: ./backend/transaction
    container_name: transaction-service-3
    volumes:
      - ./backend/middleware:/backend/middleware
    ports:
      - "30043:3004"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  transaction-service-4:
    build:
        context: ./backend/transaction
    container_name: transaction-service-4
    volumes:
      - ./backend/middleware:/backend/middleware
    ports:
      - "30044:3004"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  transaction-service-5:
    build:
        context: ./backend/transaction
    container_name: transaction-service-5
    volumes:
      - ./backend/middleware:/backend/middleware
    ports:
      - "30045:3004"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  transaction-service-6:
    build:
        context: ./backend/transaction
    container_name: transaction-service-6
    volumes:
      - ./backend/middleware:/backend/middleware
    ports:
      - "30046:3004"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  transaction-service-7:
    build:
        context: ./backend/transaction
    container_name: transaction-service-7
    volumes:
      - ./backend/middleware:/backend/middleware
    ports:
      - "30047:3004"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  transaction-service-8:
    build:
        context: ./backend/transaction
    container_name: transaction-service-8
    volumes:
      - ./backend/middleware:/backend/middleware
    ports:
      - "30048:3004"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  transaction-service-9:
    build:
        context: ./backend/transaction
    container_name: transaction-service-9
    volumes:
      - ./backend/middleware:/backend/middleware
    ports:
      - "30049:3004"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - backend-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-service-1:
    build:
      context: ./backend/order
    container_name: order-service-1
    ports:
      - "30021:3002"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  order-service-2:
    build:
      context: ./backend/order
    container_name: order-service-2
    ports:
      - "30022:3002"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-service-3:
    build:
      context: ./backend/order
    container_name: order-service-3
    ports:
      - "30023:3002"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  order-service-4:
    build:
      context: ./backend/order
    container_name: order-service-4
    ports:
      - "30024:3002"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-service-5:
    build:
      context: ./backend/order
    container_name: order-service-5
    ports:
      - "30025:3002"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  order-service-6:
    build:
      context: ./backend/order
    container_name: order-service-6
    ports:
      - "30026:3002"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  order-service-7:
    build:
      context: ./backend/order
    container_name: order-service-7
    ports:
      - "30027:3002"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-service-8:
    build:
      context: ./backend/order
    container_name: order-service-8
    ports:
      - "30028:3002"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  order-service-9:
    build:
      context: ./backend/order
    container_name: order-service-9
    ports:
      - "30029:3002"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  usermanagement-service-1:
    build:
      context: ./backend/userManagement
    container_name: usermanagement-service-1
    ports:
      - "30031:3003"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend-network
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  usermanagement-service-2:
    build:
      context: ./backend/userManagement
    container_name: usermanagement-service-2
    ports:
      - "30032:3003"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  usermanagement-service-3:
    build:
      context: ./backend/userManagement
    container_name: usermanagement-service-3
    ports:
      - "30033:3003"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  usermanagement-service-4:
    build:
      context: ./backend/userManagement
    container_name: usermanagement-service-4
    ports:
      - "30034:3003"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  usermanagement-service-5:
    build:
      context: ./backend/userManagement
    container_name: usermanagement-service-5
    ports:
      - "30035:3003"
    environment:
      - NODE_ENV=development
      - MONGO_URI=${MONGO_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    image: nginx:latest
    container_name: api-gateway
    ports:
      - "8080:8080"  # API Gateway is exposed on port 8080
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      order-service-1:
        condition: service_healthy
      order-service-2:
        condition: service_healthy
      order-service-3:
        condition: service_healthy
      order-service-4:
        condition: service_healthy
      order-service-5:
        condition: service_healthy
      order-service-6:
        condition: service_healthy
      order-service-7:
        condition: service_healthy
      order-service-8:
        condition: service_healthy
      order-service-9:
        condition: service_healthy
      auth-service-1:
        condition: service_healthy
      auth-service-2:
        condition: service_healthy
      auth-service-3:
        condition: service_healthy
      auth-service-4:
        condition: service_healthy
      auth-service-5:
        condition: service_healthy
      auth-service-6:
        condition: service_healthy
      auth-service-7:
        condition: service_healthy
      auth-service-8:
        condition: service_healthy
      auth-service-9:
        condition: service_healthy
      transaction-service-1:
        condition: service_healthy
      transaction-service-2:
        condition: service_healthy
      transaction-service-3:
        condition: service_healthy
      transaction-service-4:
        condition: service_healthy
      transaction-service-5:
        condition: service_healthy
      transaction-service-6:
        condition: service_healthy
      transaction-service-7:
        condition: service_healthy
      transaction-service-8:
        condition: service_healthy
      transaction-service-9:
        condition: service_healthy
      usermanagement-service-1:
        condition: service_healthy
      usermanagement-service-2:
        condition: service_healthy
      usermanagement-service-3:
        condition: service_healthy
      usermanagement-service-4:
        condition: service_healthy
      usermanagement-service-5:
        condition: service_healthy
    networks:
      - backend-network

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672" # Management UI
    networks:
      - backend-network
    environment:
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend-network
    command: [ "redis-server", "/etc/redis/redis.conf" ]
    volumes:
      - ./backend/config/redis.conf:/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  matching-engine:
    ports:
      - "3006:3006"
    build:
      context: ./backend/matchingEngine
    container_name: matching-engine
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://rabbitmq
      - REDIS_URL=redis://redis:6379
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

networks:
  backend-network:
    driver: bridge
